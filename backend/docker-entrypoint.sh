#!/bin/bash
# Script de d√©marrage Docker pour Palmar√®s Imara

set -e

echo "üöÄ D√©marrage de Palmar√®s Imara Backend..."

# Fonction pour attendre que la base de donn√©es soit pr√™te
wait_for_db() {
    echo "‚è≥ Attente de la disponibilit√© de la base de donn√©es..."
    
    # Extraire les informations de connexion depuis DATABASE_URL
    if [[ -n "$DATABASE_URL" ]]; then
        # Parse DATABASE_URL format: postgres://user:pass@host:port/dbname
        if [[ $DATABASE_URL =~ postgresql://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then
            DB_USER="${BASH_REMATCH[1]}"
            DB_PASSWORD="${BASH_REMATCH[2]}"
            DB_HOST="${BASH_REMATCH[3]}"
            DB_PORT="${BASH_REMATCH[4]}"
            DB_NAME="${BASH_REMATCH[5]}"
            
            export PGPASSWORD=$DB_PASSWORD
            
            until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME; do
                echo "Base de donn√©es non disponible - attente..."
                sleep 2
            done
            
            echo "‚úÖ Base de donn√©es disponible!"
        else
            echo "‚ö†Ô∏è  Format DATABASE_URL non reconnu, passage √† la suite..."
        fi
    else
        echo "‚ö†Ô∏è  DATABASE_URL non d√©fini, passage √† la suite..."
    fi
}

# Fonction pour ex√©cuter les migrations
run_migrations() {
    echo "üîÑ Ex√©cution des migrations..."
    python palmaresimara/manage.py migrate --noinput
    echo "‚úÖ Migrations termin√©es!"
}

# Fonction pour collecter les fichiers statiques
collect_static() {
    echo "üì¶ Collection des fichiers statiques..."
    python palmaresimara/manage.py collectstatic --noinput --clear
    echo "‚úÖ Fichiers statiques collect√©s!"
}

# Fonction pour cr√©er un superutilisateur si les variables sont d√©finies
create_superuser() {
    if [[ -n "$DJANGO_SUPERUSER_USERNAME" && -n "$DJANGO_SUPERUSER_EMAIL" && -n "$DJANGO_SUPERUSER_PASSWORD" ]]; then
        echo "üë§ Cr√©ation du superutilisateur..."
        python palmaresimara/manage.py shell << EOF
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='$DJANGO_SUPERUSER_USERNAME').exists():
    User.objects.create_superuser('$DJANGO_SUPERUSER_USERNAME', '$DJANGO_SUPERUSER_EMAIL', '$DJANGO_SUPERUSER_PASSWORD')
    print('Superutilisateur cr√©√© avec succ√®s!')
else:
    print('Superutilisateur existe d√©j√†!')
EOF
    else
        echo "‚ö†Ô∏è  Variables de superutilisateur non d√©finies, passage √† la suite..."
    fi
}

# Fonction de v√©rification de sant√©
health_check() {
    echo "üîç V√©rification de sant√© de l'application..."
    python palmaresimara/manage.py check --deploy
    echo "‚úÖ V√©rifications termin√©es!"
}

# Ex√©cution des √©tapes de d√©marrage
main() {
    echo "Environnement: ${DJANGO_SETTINGS_MODULE:-palmaresimara.settings}"
    echo "Debug mode: ${DEBUG:-False}"
    
    # Attendre la base de donn√©es
    wait_for_db
    
    # Ex√©cuter les migrations
    run_migrations
    
    # Collecter les fichiers statiques
    collect_static
    
    # Cr√©er un superutilisateur si demand√©
    create_superuser
    
    # V√©rification de sant√©
    health_check
    
    echo "üéâ Initialisation termin√©e avec succ√®s!"
    echo "üöÄ D√©marrage de l'application..."
    
    # Ex√©cuter la commande pass√©e en argument
    exec "$@"
}

# Point d'entr√©e principal
if [ "${1}" = 'gunicorn' ]; then
    main "$@"
elif [ "${1}" = 'python' ] && [ "${2}" = 'palmaresimara/manage.py' ]; then
    # Pour les commandes Django directes
    wait_for_db
    exec "$@"
else
    # Pour toute autre commande
    exec "$@"
fi
